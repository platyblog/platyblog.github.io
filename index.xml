<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Platyblog</title>
    <link>http://platyblog.github.io/</link>
    <description>Recent content on Platyblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Jul 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://platyblog.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>De la finitude de l&#39;Ãªtre</title>
      <link>http://platyblog.github.io/post/streamless/</link>
      <pubDate>Sun, 02 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://platyblog.github.io/post/streamless/</guid>
      <description>A reddit user, /u/INL_TT, has recently proposed a few problems to be solved using your favourite proof assistant. The last one has been particularly interesting: coq-math-problems.
The problem is taken from a paper by Coquand and Spiwack1 investigating ways to formalise in a constructivist context the notion of finite set. A common characterisation of a finite set A is the impossibility to inject the natural numbers into A. Or phrased differently, any stream of elements of A contains a duplicate.</description>
    </item>
    
    <item>
      <title>To depend or not to depend</title>
      <link>http://platyblog.github.io/post/gralina/</link>
      <pubDate>Sun, 02 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://platyblog.github.io/post/gralina/</guid>
      <description>Vincent recently pointed us to an introduction1 to a quite sexy recent mathematical theory: Graphical Linear Algebra (GLA). We discuss in this blog post the use of dependent types to formalise this theory, following attempts conducted with Pierre.
#2 Graphical Linear Algebra
The theory of linear algebra is part of the compulsory credentials of any undergrad in mathematics, and crept into numerous scientific fields. Everywhere, the story follows the same (very) rough framework (overlooking the question of the underlying field and so-on).</description>
    </item>
    
    <item>
      <title>$\mathbb{N}\rightarrow\mathbb{B}$ is a searchable set</title>
      <link>http://platyblog.github.io/post/searchable-set/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://platyblog.github.io/post/searchable-set/</guid>
      <description>I never quite understood why all the crazy magic in this post actually works, nor did I manage to grok Escardo&amp;rsquo;s paper. But I will try to write what I understood so far.
Escardo shows that the Cantor space ($\mathbb{N}\rightarrow\mathbb{B}$ where $\mathbb{B}$ is the set of booleans) admits exhaustive search, meaning that for any total predicate $\varphi$, it is possible to find a witness $w$ such that $\varphi(w)$ is true or show that such a witness doesn&amp;rsquo;t exist in finite time.</description>
    </item>
    
    <item>
      <title>Welcome to the platyblog!</title>
      <link>http://platyblog.github.io/post/firstpost/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://platyblog.github.io/post/firstpost/</guid>
      <description>This is our first post ever! Platyblog is the blog of the Platypus reading group located in Rennes in the Celtique research group at Inria/Irisa.
We will mainly post about programming languages research and stuff.</description>
    </item>
    
  </channel>
</rss>